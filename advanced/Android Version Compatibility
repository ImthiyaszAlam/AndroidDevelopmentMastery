# Android Version Compatibility

## Overview

### **What is Android Version Compatibility?**
Android Version Compatibility refers to ensuring your application functions as expected across multiple Android versions and devices. Android introduces new features with every release, but developers must maintain compatibility with older versions to reach a wider audience.

### **Why is Android Version Compatibility Important?**
1. **User Base:** Android devices run a variety of operating system versions, so compatibility ensures a larger reach.
2. **Backward Compatibility:** Apps must work seamlessly on older devices while utilizing the latest features on newer devices.
3. **User Experience:** Avoid crashes or bugs by handling API differences.
4. **Market Standards:** Adhering to compatibility ensures compliance with Google Play guidelines.

### **How to Ensure Android Version Compatibility?**
1. **Specify Minimum and Target SDK Versions:** 
   - Use `minSdkVersion` to define the lowest version your app supports.
   - Use `targetSdkVersion` to specify the Android version your app is optimized for.

   **Code Example:**
   ```gradle
   android {
       compileSdkVersion 34
       defaultConfig {
           minSdkVersion 21
           targetSdkVersion 34
       }
   }
   ```

2. **Feature Detection and Version Checks:** Use runtime checks to ensure a feature exists before accessing it.
3. **Compatibility Libraries:** Leverage Jetpack libraries to access features with backward compatibility.

---

## Prebuilt Classes, Functions, and Interfaces

### 1. **`Build.VERSION`**
- **Description:** Provides constants for the SDK version of the Android device.
- **Usage:** Use this to check the current SDK version.
- **Code Example:**
  ```java
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      // Use features available from Android O
  } else {
      // Fallback for older versions
  }
  ```

### 2. **`Build.VERSION_CODES`**
- **Description:** Contains constants for each Android version.
- **Usage:** Use these constants for version checks.
- **Code Example:**
  ```java
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
      // Feature available in Android 10 and above
  }
  ```

### 3. **Jetpack Libraries (AndroidX)**
- **Description:** Libraries that provide backward-compatible versions of Android components.
- **Examples:**
  - **`AppCompatActivity:`** Provides backward-compatible support for `Activity`.
  - **`Fragment:`** Replaces older `android.app.Fragment` with `androidx.fragment.app.Fragment`.
  - **Code Example:**
    ```java
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.fragment.app.Fragment;
    ```

### 4. **`ActivityCompat`**
- **Description:** Helps manage permissions and features that require backward compatibility.
- **Usage:** Handle runtime permissions.
- **Code Example:**
  ```java
  if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.CAMERA)) {
      // Show rationale
  }
  ```

### 5. **`ContextCompat`**
- **Description:** Provides backward-compatible access to resources and features.
- **Usage:** Retrieve resources and check permissions.
- **Code Example:**
  ```java
  if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
      // Request permission
  }
  ```

### 6. **`NotificationCompat`**
- **Description:** Build notifications that are backward-compatible.
- **Usage:** Ensures notifications display correctly on older devices.
- **Code Example:**
  ```java
  NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)
      .setSmallIcon(R.drawable.notification_icon)
      .setContentTitle("Title")
      .setContentText("Content")
      .setPriority(NotificationCompat.PRIORITY_HIGH);
  ```

### 7. **`Compatibility Libraries`**
- **Examples:**
  - `RecyclerView` for lists.
  - `CardView` for cards.
  - `ConstraintLayout` for layouts.

---

## Handling Android Version Differences

### **1. Feature Detection**
Check for the presence of a feature or API at runtime.
```java
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    // Use Android 6.0 (API 23) features
} else {
    // Fallback for older versions
}
```

### **2. Using Compatibility Libraries**
Utilize Jetpack libraries for UI components, lifecycle management, and more.
```java
implementation "androidx.appcompat:appcompat:1.6.1"
implementation "androidx.core:core-ktx:1.10.1"
```

### **3. Conditional Resource Usage**
Provide alternate resources for different API levels using the `res` folder.
- **Example:** Use `drawable-v21` for resources specific to API 21 and above.

---

## Real-Life Examples

### **1. Dynamic Features**
Enable night mode dynamically if the version supports it.
```java
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
} else {
    // Manually handle night mode for older versions
}
```

### **2. Permissions**
Request runtime permissions only if the Android version requires it.
```java
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    requestPermissions(new String[]{Manifest.permission.CAMERA}, PERMISSION_REQUEST_CODE);
}
```

### **3. Notifications**
Display inline replies for Android 7.0 and above.
```java
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    Notification.Action replyAction = new Notification.Action.Builder(
        Icon.createWithResource(this, R.drawable.icon), "Reply", replyPendingIntent).build();
}
```

---

## Differences Across Android Versions

1. **Runtime Permissions (API 23+):**
   - Before API 23, permissions were granted during installation.
   - After API 23, permissions are requested at runtime.

2. **Notifications:**
   - Channels introduced in API 26.
   - Inline replies available from API 24.

3. **UI Components:**
   - Material Design features like BottomNavigationView introduced in newer APIs.

---

## Summary
